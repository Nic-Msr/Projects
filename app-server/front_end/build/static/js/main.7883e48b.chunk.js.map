{"version":3,"sources":["components/NavBar.js","api.js","components/Cloudmotion.js","components/JsmpegPlayer.js","components/Map.js","components/Home.js","App.js","components/Archive.js","serviceWorker.js","index.js"],"names":["NavBar","Navbar","bg","variant","Brand","as","Link","href","to","Nav","className","NavLink","exact","socket","openSocket","subscribeToData","cb","on","data","Cloudmotion","props","err","labels","values","Object","entries","key","value","push","newDataSet","state","datasets","newChartData","setState","label","backgroundColor","borderColor","borderWidth","barPercentage","hoverBackgroundColor","hoverBorderColor","options","maintainAspectRatio","responsive","legend","display","title","text","scales","xAxes","scaleLabel","labelString","ticks","beginAtZero","userCallback","item","yAxes","width","height","this","Component","JsmpegPlayer","els","videoWrapper","wrapperClassName","ref","JSMpeg","VideoElement","videoUrl","overlayOptions","CALIB","CENTER","Map","cloud_base_height","coverage_img","coverageOverlay","setUrl","imagestr","subscribeToShadow","shadow_img","shadowOverlay","updateImageBounds","fetch","then","res","json","catch","console","log","satellite","L","tileLayer","attribution","terrain","baseMaps","map","center","zoom","layers","imageOverlay","addTo","coverageBorder","rectangle","shadowBorder","overlayMaps","control","north","position","onAdd","div","DomUtil","create","innerHTML","marker","draggable","id","style","startCoordinate","NSdistance","EWdistance","sun_altitude","azimuth","cbh","isShadow","finalCoordinate","NSoffset","EWoffset","Math","cos","tan","sin","PI","sun","SunCalc","getPosition","Date","cloudHeight","calibrationAngle","atan","largeHypo","sqrt","pow","addDistanceToCoordinate","altitude","coverageBounds","getImageBounds","shadowBounds","undefined","setBounds","videoOptions","poster","videoOverlayOptions","Home","time","cloud_coverage","temperature","dew_point","barometric_pressure","Row","noGutters","Col","sm","Card","border","color","Header","Body","Text","fontStyle","fontSize","format","Fragment","whiteSpace","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iUAgBeA,EAZA,WACb,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,GAAIC,IAAMC,KAAK,IAAIC,GAAG,KAApC,kBACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIH,KAAL,CAAUD,GAAIM,IAASJ,KAAK,IAAIC,GAAG,IAAII,OAAK,GAA5C,W,+DCJDC,E,MAASC,GAFA,0BAYhB,SAASC,EAAgBC,GACrBH,EAAOI,GAAG,QAAQ,SAAAC,GAAI,OAAIF,EAAG,KAAME,M,6jBCsFxBC,E,YAhGX,WAAYC,GAAQ,IAAD,EDiBSJ,ECjBT,2BACf,4CAAMI,IDgBkBJ,ECdD,SAACK,EAAKH,GAEzB,IADA,IAAII,EAAS,GAAIC,EAAS,GAC1B,MAA2BC,OAAOC,QAAQP,GAA1C,eAAiD,CAAC,IAAD,0BAArCQ,EAAqC,KAAhCC,EAAgC,KAC7CL,EAAOM,KAAKF,GACZH,EAAOK,KAAKD,GAGhB,IACME,EAAU,KADG,EAAKC,MAAMZ,KAAKa,SAAS,IAE5CF,EAAWX,KAAOK,EAElB,IAAMS,EAAY,KACb,EAAKF,MAAMZ,KADE,CAEhBa,SAAU,CAACF,GACXP,OAAQA,IAGV,EAAKW,SAAS,CAAEf,KAAMc,KDFhCnB,EAAOI,GAAG,SAAS,SAAAC,GAAI,OAAIF,EAAG,KAAME,MCK9B,EAAKY,MAAQ,CACTZ,KAAM,CACFI,OAAQ,GACRS,SAAU,CAAC,CACHG,MAAO,eACPC,gBAAiB,uBACjBC,YAAa,qBACbC,YAAa,EACbC,cAAe,KACfC,qBAAsB,uBACtBC,iBAAkB,qBAClBtB,KAAM,OAKtB,EAAKuB,QAAU,CACXC,qBAAqB,EACrBC,YAAY,EACZC,OAAQ,CACJC,SAAS,GAEbC,MAAO,CACHD,SAAS,EACTE,KAAM,2BAEVC,OAAQ,CACJC,MAAO,CACH,CACIC,WAAY,CACRL,SAAS,EACTM,YAAa,4BAEjBC,MAAO,CACHC,aAAY,EACZC,aAAc,SAASC,GACnB,OAAOA,EAAO,WAK9BC,MAAO,CACH,CACIN,WAAY,CACRL,SAAS,EACTM,YAAa,uBAEjBC,MAAO,CACHC,aAAY,OAvEjB,E,sEAgFf,OACI,6BAEA,6BACI,kBAAC,IAAD,CACII,MAAQ,IACRC,OAAS,IACTxC,KAAMyC,KAAK7B,MAAMZ,KACjBuB,QAAUkB,KAAKlB,gB,GAzFTmB,a,kBCFLC,E,YACnB,WAAYzC,GAAQ,IAAD,8BACjB,4CAAMA,KAED0C,IAAM,CACTC,aAAc,MAJC,E,sEAQT,IAAD,OACP,OACE,yBACErD,UAAWiD,KAAKvC,MAAM4C,iBACtBC,IAAK,SAAAF,GAAY,OAAI,EAAKD,IAAIC,aAAeA,O,0CAQjD,IAAIG,IAAOC,aACTR,KAAKG,IAAIC,aACTJ,KAAKvC,MAAMgD,SACXT,KAAKvC,MAAMqB,QACXkB,KAAKvC,MAAMiD,oB,GAzByBT,a,mCCKpCU,EAAS,CAAC,SAAW,SAAW,EAAE,GAIlCC,EAAS,CAAC,WAAY,WAsLbC,E,YAnLb,WAAYpD,GAAQ,IAAD,EHRQJ,EGQR,4BACjB,4CAAMI,KAqBRU,MAAQ,CACN2C,mBAAoB,GH/BKzD,EGWL,SAACK,EAAKqD,GAExB,EAAKC,gBAAgBC,OAAOF,IHZhC7D,EAAOI,GAAG,YAAY,SAAA4D,GAAQ,OAAI7D,EAAG,KAAM6D,MAG7C,SAA2B7D,GACzBH,EAAOI,GAAG,UAAU,SAAA4D,GAAQ,OAAI7D,EAAG,KAAM6D,MGWvCC,EAAkB,SAACzD,EAAK0D,GAEtB,EAAKC,cAAcJ,OAAOG,MAG5BhE,GAAgB,SAACM,EAAKH,GAEpB,EAAKe,SAASf,GAGd,EAAK+D,uBAlBU,E,iFA0BE,IAAD,OAClBC,MAAM,YACLC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAM,SAACjE,GACN,EAAKe,SAASf,GACd,EAAK+D,uBACJK,MAAMC,QAAQC,KAIf,IAAIC,EAAYC,IAAEC,UAAU,gGAAiG,CAC3HC,YAAa,kJAIbC,EAAWH,IAAEC,UAAU,iGAAkG,CACvHC,YAAa,+MAGfE,EAAW,CACX,UAAaL,EACb,QAAWI,GAIflC,KAAKoC,IAAML,IAAEK,IAAI,MAAO,CACtBC,OAAQzB,EACR0B,KAAM,GACNC,OAAQ,CAAET,EAAWI,KAGvBlC,KAAKqB,cAAgBU,IAAES,aAAa,GAAI,CAAC,CAAC,gBAAiB,gBAAiB,CAAC,gBAAiB,kBAC9FxC,KAAKqB,cAAcoB,MAAMzC,KAAKoC,KAE9BpC,KAAKgB,gBAAkBe,IAAES,aAAa,GAAI,CAAC,CAAC,gBAAiB,gBAAiB,CAAC,gBAAiB,kBAChGxC,KAAKgB,gBAAgByB,MAAMzC,KAAKoC,KAgBhCpC,KAAK0C,eAAiBX,IAAEY,UAAU,CAAC,CAAC,gBAAiB,gBAAiB,CAAC,gBAAiB,iBAd5D,CAC1B,MAAS,UACT,OAAU,EACV,MAAQ,EACR,YAAe,KAWjB3C,KAAK0C,eAAeD,MAAMzC,KAAKoC,KAE/BpC,KAAK4C,aAAeb,IAAEY,UAAU,CAAC,CAAC,gBAAiB,gBAAiB,CAAC,gBAAiB,iBAV5D,CACxB,MAAS,UACT,OAAU,EACV,MAAQ,EACR,YAAe,KAOjB3C,KAAK4C,aAAaH,MAAMzC,KAAKoC,KAE7B,IAAIS,EAAc,CAChB,OAAU7C,KAAKqB,cACf,gBAAiBrB,KAAK4C,aACtB,SAAY5C,KAAKgB,gBACjB,kBAAmBhB,KAAK0C,gBAG1BX,IAAEe,QAAQP,OAAOJ,EAAUU,GAAaJ,MAAMzC,KAAKoC,KAEnD,IAAIW,EAAQhB,IAAEe,QAAQ,CAACE,SAAU,gBACjCD,EAAME,MAAQ,SAASb,GACnB,IAAIc,EAAMnB,IAAEoB,QAAQC,OAAO,MAAO,eAElC,OADAF,EAAIG,UAAY,8BACTH,GAEXH,EAAMN,MAAMzC,KAAKoC,KAEJL,IAAEuB,OAAO1C,EACpB,CACE2C,WAAW,EACXpE,MAAO,oBAEJsD,MAAMzC,KAAKoC,O,+BAIlB,OACE,yBAAKoB,GAAG,MAAMC,MAAO,CAACvE,QAAQ,OAAQa,OAAO,a,8CAOzB2D,EAAiBC,EAAYC,EAAYC,EAAcC,EAASC,EAAKC,GAC3F,IAAIC,EAAkB,CAAC,IAAK,KACxBC,EAAW,EAAGC,EAAW,EAU7B,OARIH,IACFE,EAAWE,KAAKC,IAAIP,GAAWM,KAAKE,IAAIT,GAAgBE,EACxDI,GAAYC,KAAKG,IAAIT,GAAWM,KAAKE,IAAIT,GAAgBE,GAG3DE,EAAgB,GAAKP,EAAgB,IAAOE,EAAaM,GAAY,SACrED,EAAgB,GAAKP,EAAgB,IAAOC,EAAaQ,GACpC,SAAYC,KAAKC,IAAIX,EAAgB,GAAKU,KAAKI,GAAK,KAClEP,I,qCAGMD,GAIb,IAAIS,EAAMC,IAAQC,YAAY,IAAIC,KAAQhE,EAAO,GAAIA,EAAO,IAKxDiE,EAAc7E,KAAK7B,MAAM2C,kBACzBgE,EAAmBV,KAAKW,KAAKpE,EAAM,GAAKA,EAAM,IAG9CqE,EADaZ,KAAKa,KAAKb,KAAKc,IAAIvE,EAAM,GAAG,EAAG,GAAKyD,KAAKc,IAAIvE,EAAM,GAAG,EAAG,IAC7CkE,EAAclE,EAAM,GAC7CgD,EAAaS,KAAKC,IAAIS,GAAoBE,EAC1CpB,EAAaQ,KAAKG,IAAIO,GAAoBE,EAU9C,MAAO,CARehF,KAAKmF,wBAAwBvE,GAAS+C,EAAYC,EAAYa,EAAIW,SACrCX,EAAIX,QAASe,EAAab,GAErDhE,KAAKmF,wBAAwBvE,EAAQ+C,GAAaC,EAAYa,EAAIW,SACrCX,EAAIX,QAASe,EAAab,M,0CAS/E,IAAMqB,EAAiBrF,KAAKsF,gBAAe,GACrCC,EAAevF,KAAKsF,gBAAe,QAGVE,IAAzBxF,KAAKgB,kBACThB,KAAKgB,gBAAgByE,UAAUJ,GAC/BrF,KAAK0C,eAAe+C,UAAUJ,SAIHG,IAAvBxF,KAAKqB,gBACTrB,KAAKqB,cAAcoE,UAAUF,GAC7BvF,KAAK4C,aAAa6C,UAAUF,Q,GA/KhBtF,a,kBCNZyF,EAAe,CACnBC,OAAQ,mCAGJC,EAAsB,GA2FbC,E,YAxFT,WAAYpI,GAAQ,IAAD,EJIQJ,EIJR,2BACnB,4CAAMI,IAENL,GAAgB,SAACM,EAAKH,GACpB,EAAKe,SAASf,GACd,EAAKe,SAAS,CAAEwH,KAAM,IAAIlB,UJDDvH,EIIH,SAACK,EAAKH,GAC5B,EAAKe,SAASf,IJJpBL,EAAOI,GAAG,iBAAiB,SAAAC,GAAI,OAAIF,EAAG,KAAME,MIOxC,EAAKY,MAAQ,CACX4H,eAAgB,GAChBC,YAAa,GACbC,UAAW,GACXC,oBAAqB,GACrBpF,kBAAmB,GACnBgF,KAAM,IAlBW,E,iFAsBA,IAAD,OAClBvE,MAAM,YACLC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAM,SAACjE,GACN,EAAKe,SAASf,MACboE,MAAMC,QAAQC,O,+BAIf,OACE,kBAACsE,EAAA,EAAD,CAAKC,UAAU,QACf,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAG7C,MAAO,CAACjF,gBAAgB,aAAcsB,MAAM,OAAQC,OAAO,SACrE,kBAACwG,EAAA,EAAD,CAAMC,OAAO,QAAQ/C,MAAO,CAACjF,gBAAgB,aAAcU,QAAQ,OAAQuH,MAAM,cAC/E,kBAACF,EAAA,EAAKG,OAAN,uBACA,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKK,KAAN,mBACA,6BACA,kBAAC,EAAD,CACIvG,iBAAiB,gBAEjBI,SAAS,6BACT3B,QAAS4G,EACThF,eAAgBkF,KAGpB,kBAACW,EAAA,EAAKK,KAAN,CAAWnD,MAAO,CAACgD,MAAM,cAAzB,wCAGJ,6BACA,kBAACF,EAAA,EAAD,CAAMC,OAAO,QAAQ/C,MAAO,CAACjF,gBAAiB,aAAcU,QAAS,SACrE,kBAACqH,EAAA,EAAKI,KAAN,CAAWlD,MAAO,CAAEgD,MAAO,cACzB,kBAACF,EAAA,EAAKK,KAAN,2BACA,kBAACL,EAAA,EAAKK,KAAN,wBAA4B5G,KAAK7B,MAAM4H,eAAvC,KACA,kBAACQ,EAAA,EAAKK,KAAN,qBAAyB5G,KAAK7B,MAAM6H,YAApC,UACA,kBAACO,EAAA,EAAKK,KAAN,kBAAsB5G,KAAK7B,MAAM8H,UAAjC,UACA,kBAACM,EAAA,EAAKK,KAAN,6BAAiC5G,KAAK7B,MAAM+H,oBAA5C,OACA,kBAACK,EAAA,EAAKK,KAAN,iCAAqC5G,KAAK7B,MAAM2C,kBAAhD,OACA,kBAACyF,EAAA,EAAKK,KAAN,CAAWnD,MAAO,CAAEoD,UAAW,SAAUC,SAAU,SAAnD,gBACE,kBAAC,IAAD,CAAQC,OAAO,OAAO/G,KAAK7B,MAAM2H,UAKvC,kBAACO,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,CAAMC,OAAO,SACX,kBAACD,EAAA,EAAKI,KAAN,KAEE,kBAACJ,EAAA,EAAKK,KAAN,CAAWnD,MAAO,CAACgD,MAAM,cAAzB,oBAEA,kBAAC,IAAMO,SAAP,KACE,kBAAC,EAAD,OAGF,kBAAC,IAAMA,SAAP,KACE,kBAAC,EAAD,OAEF,yBAAKvD,MAAO,CAACwD,WAAW,aAAxB,Y,GA/EGhH,aCYJiH,GCxBOjH,Y,wLDQlB,OACE,kBAAC,IAAM+G,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO/J,OAAK,EAACkK,KAAK,IAAIC,UAAWvB,W,GAR7B5F,cEIEoH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxG,MAAK,SAAAyG,GACjCA,EAAaC,kB","file":"static/js/main.7883e48b.chunk.js","sourcesContent":["import React from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport { Link, NavLink } from 'react-router-dom';\n\nconst NavBar = () => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand as={Link} href='/' to='/'>Cloud Tracking</Navbar.Brand>\n      <Nav className=\"ml-auto\">\n        <Nav.Link as={NavLink} href='/' to='/' exact>HOME</Nav.Link>\n        {/* <Nav.Link as={NavLink} href='/archive' to='/archive'>ARCHIVE</Nav.Link> */}\n      </Nav>\n    </Navbar>\n  );\n}\n\nexport default NavBar;","import openSocket from 'socket.io-client';\n\n// const API_URL = 'http://cloudtrackingcloudserver.herokuapp.com';\nconst API_URL = 'http://localhost:3001/';\n\nconst  socket = openSocket(API_URL);\n\nfunction subscribeToCoverage(cb) {\n  socket.on('coverage', imagestr => cb(null, imagestr));\n}\n\nfunction subscribeToShadow(cb) {\n  socket.on('shadow', imagestr => cb(null, imagestr));\n}\n\nfunction subscribeToData(cb) { \n    socket.on('data', data => cb(null, data))\n}\n\nfunction subscribeToCoverageData(cb) { \n  socket.on('coverage_data', data => cb(null, data))\n}\n\nfunction subscribeToPredictions(cb) {\n  socket.on('predi', data => cb(null, data))\n}\n\nexport { subscribeToCoverageData, subscribeToCoverage, subscribeToShadow, subscribeToData, subscribeToPredictions, API_URL };","import React, { Component } from 'react';\nimport { Alert } from 'react-bootstrap';\nimport { Bar } from 'react-chartjs-2';\nimport { subscribeToPredictions } from '../api'\n\nclass Cloudmotion extends Component{\n    constructor(props) {\n        super(props);\n\n        subscribeToPredictions((err, data) => {\n            var labels = [], values = []\n            for (const [key, value] of Object.entries(data)) {\n                labels.push(key)\n                values.push(value)\n            }\n\n            const oldDataSet = this.state.data.datasets[0];\n            const newDataSet = { ...oldDataSet };\n            newDataSet.data = values\n      \n            const newChartData = {\n              ...this.state.data,\n              datasets: [newDataSet],\n              labels: labels\n            };\n            \n            this.setState({ data: newChartData });\n        });\n\n        this.state = {\n            data: {\n                labels: [],\n                datasets: [{\n                        label: 'Cloud Motion',\n                        backgroundColor: 'rgba(255,99,132,0.2)',\n                        borderColor: 'rgba(255,99,132,1)',\n                        borderWidth: 1,\n                        barPercentage: 1.25,\n                        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n                        hoverBorderColor: 'rgba(255,99,132,1)',\n                        data: []\n                }]\n            }\n        };\n        \n        this.options = {\n            maintainAspectRatio: false,\n            responsive: true,\n            legend: {\n                display: false\n            },\n            title: {\n                display: true,\n                text: 'Cloud Motion Prediction'\n            },\n            scales: {\n                xAxes: [\n                    {\n                        scaleLabel: {\n                            display: true,\n                            labelString: 'Time until Sun Occlusion'\n                            },\n                        ticks: {\n                            beginAtZero:true,\n                            userCallback: function(item) {\n                                return item + \" min\"\n                            }\n                        }\n                    }\n                ],\n                yAxes: [\n                    {\n                        scaleLabel: {\n                            display: true,\n                            labelString: '# of Cloud Segments'\n                          },\n                        ticks: {\n                            beginAtZero:true\n                        }\n                    }\n                ]\n            }\n        }\n    }\n\n    render(){\n        return(\n            <div>\n            {/* <Alert variant=\"info\">An alert that appears when clouds are approaching the sun.</Alert> */}\n            <div>\n                <Bar\n                    width={ 150 }\n                    height={ 200 }\n                    data={this.state.data}\n                    options ={this.options}\n                />\n            </div>\n            </div>\n        );\n    }\n}\n\nexport default Cloudmotion;","import React, {Component} from 'react';\nimport JSMpeg from '@cycjimmy/jsmpeg-player';\n\nexport default class JsmpegPlayer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.els = {\n      videoWrapper: null,\n    };\n  };\n\n  render() {\n    return (\n      <div\n        className={this.props.wrapperClassName}\n        ref={videoWrapper => this.els.videoWrapper = videoWrapper}>\n      </div>\n    );\n  };\n\n  componentDidMount() {\n    // Reference documentation, pay attention to the order of parameters.\n    // https://github.com/cycjimmy/jsmpeg-player#usage\n    new JSMpeg.VideoElement(\n      this.els.videoWrapper,\n      this.props.videoUrl,\n      this.props.options,\n      this.props.overlayOptions\n    );\n  };\n};\n\n","import React, { Component } from 'react';\nimport L from 'leaflet';\nimport { subscribeToCoverage, subscribeToShadow, subscribeToData } from '../api';\nimport SunCalc from 'suncalc';\n\n// Calib is an array of the dimensions of whatever was used to calibrate the camera.\n// In our case, we used a square sheet of paper that's 210mmx210mm and was held at\n// 75mm away from the lens\nconst CALIB  = [0.6883333, 0.6883333, 1/6];\n\n// lat/long coordinates of the center of the image. i.e. wherever the camera is placed\n// const CENTER = [28.4294, -81.309];\nconst CENTER = [28.607334, -81.203706]\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    \n    subscribeToCoverage((err, coverage_img) => {\n      // If already exists, update the coverage image\n      this.coverageOverlay.setUrl(coverage_img);\n    });\n\n    subscribeToShadow((err, shadow_img) => {\n      // If already exists, update the shadow image\n      this.shadowOverlay.setUrl(shadow_img);\n    });\n\n    subscribeToData((err, data) => {\n      // Update state\n      this.setState(data);\n\n      // Update Image bounds\n      this.updateImageBounds();\n    });\n  }\n\n  state = {\n    cloud_base_height: -1\n  };\n\n  componentDidMount() {\n    fetch('/weather')\n    .then( res => res.json() )\n    .then( (data) => {\n      this.setState(data)\n      this.updateImageBounds()\n    }).catch(console.log)\n\n    // var satellite = L.tileLayer('http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',\n    //       { maxZoom: 20, subdomains:['mt0','mt1','mt2','mt3'] }),\n      var satellite = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n        attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n      }),      \n        // terrain   = L.tileLayer('http://{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}',\n        //   { maxZoom: 20, subdomains:['mt0','mt1','mt2','mt3'] })\n        terrain =  L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}', {\n          attribution: 'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ, TomTom, Intermap, iPC, USGS, FAO, NPS, NRCAN, GeoBase, Kadaster NL, Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), and the GIS User Community'\n        })\n\n    var baseMaps = {\n        \"Satellite\": satellite,\n        \"Terrain\": terrain,\n    };\n\n    // Create Map Object\n    this.map = L.map('map', {\n      center: CENTER,\n      zoom: 14,\n      layers: [ satellite, terrain ]\n    });\n    \n    this.shadowOverlay = L.imageOverlay('', [[28.42000000001, -81.42000000001], [28.42000000002, -81.42000000002]]);\n    this.shadowOverlay.addTo(this.map);\n    \n    this.coverageOverlay = L.imageOverlay('', [[28.42000000001, -81.42000000001], [28.42000000002, -81.42000000002]]);\n    this.coverageOverlay.addTo(this.map);\n    \n    var coverageBorderOptions = {\n      \"color\": \"#d35fb7\",\n      \"weight\": 2,\n      \"fill\": false,\n      \"fillOpacity\": .1\n    };\n\n    var shadowBorderOptions = {\n      \"color\": \"#fefe62\",\n      \"weight\": 2,\n      \"fill\": false,\n      \"fillOpacity\": .1\n    };\n        \n    this.coverageBorder = L.rectangle([[28.42000000001, -81.42000000001], [28.42000000002, -81.42000000002]], coverageBorderOptions)\n    this.coverageBorder.addTo(this.map)\n\n    this.shadowBorder = L.rectangle([[28.42000000001, -81.42000000001], [28.42000000002, -81.42000000002]], shadowBorderOptions)\n    this.shadowBorder.addTo(this.map)\n\n    var overlayMaps = {\n      \"Shadow\": this.shadowOverlay,\n      \"Shadow Bounds\": this.shadowBorder,\n      \"Coverage\": this.coverageOverlay,\n      \"Coverage Bounds\": this.coverageBorder\n    }\n  \n    L.control.layers(baseMaps, overlayMaps).addTo(this.map);\n\n    var north = L.control({position: \"bottomright\"});\n    north.onAdd = function(map) {\n        var div = L.DomUtil.create(\"div\", \"info legend\");\n        div.innerHTML = '<img src=\"north_arrow.png\">';\n        return div;\n    }\n    north.addTo(this.map);\n\n    var marker = L.marker(CENTER,\n      {\n        draggable: false,        // Make the icon dragable\n        title: 'Camera Position'\n      });\n    marker.addTo(this.map)\n  };\n\n  render (){\n    return (\n      <div id=\"map\" style={{display:\"flex\", height:\"550px\"}}></div>\n    );\n  };\n\n  // Input: Starting lat/long coordinate, North/South distance travlled, East/West distance.\n  // Return: Final latitude value after travelling the input distance\n  // Forumals: https://stackoverflow.com/questions/1253499/simple-calculations-for-working-with-lat-lon-and-km-distance\n  addDistanceToCoordinate(startCoordinate, NSdistance, EWdistance, sun_altitude, azimuth, cbh, isShadow) {\n    var finalCoordinate = [1e9, 1e9];\n    var NSoffset = 0, EWoffset = 0;\n\n    if (isShadow) {\n      NSoffset = Math.cos(azimuth) * Math.tan(sun_altitude) * cbh;\n      EWoffset = -Math.sin(azimuth) * Math.tan(sun_altitude) * cbh;\n    }\n\n    finalCoordinate[0] = startCoordinate[0] + ((EWdistance + NSoffset) / 362775.6);\n    finalCoordinate[1] = startCoordinate[1] + ((NSdistance + EWoffset) /\n                         365223.1) * Math.cos(startCoordinate[0] * Math.PI / 180);\n    return finalCoordinate;\n  }\n\n  getImageBounds(isShadow) {\n    // Returns a {azimuth, altitude} object. We're only interested in altitude\n    // sun altitude above the horizon in radians, e.g. 0 at the horizon and PI/2 at the zenith (straight over your head)\n    // Azimuth: 0 is south and Math.PI * 3/4 is northwest\n    var sun = SunCalc.getPosition(new Date(), CENTER[0], CENTER[1]);\n\n    // ===================================================================================\n    // To avoid inflating this code with comments, check the final project design document\n    // for a more detailed description that explains the logic behind this.\n    var cloudHeight = this.state.cloud_base_height;\n    var calibrationAngle = Math.atan(CALIB[0] / CALIB[1]);\n\n    var smallHypo  = Math.sqrt(Math.pow(CALIB[0]/2, 2) + Math.pow(CALIB[1]/2, 2));\n    var largeHypo  = smallHypo * cloudHeight / CALIB[2];\n    var NSdistance = Math.cos(calibrationAngle) * largeHypo;\n    var EWdistance = Math.sin(calibrationAngle) * largeHypo;\n\n    var upperLeftCorner = this.addDistanceToCoordinate(CENTER, -NSdistance, EWdistance, sun.altitude,\n                                                       sun.azimuth, cloudHeight, isShadow);\n\n    var bottomRightCorner = this.addDistanceToCoordinate(CENTER, NSdistance, -EWdistance, sun.altitude,\n                                                         sun.azimuth, cloudHeight, isShadow);\n    // ===================================================================================\n\n    // To be passed to Leaflet to be displayed onto the map\n    return [upperLeftCorner, bottomRightCorner];\n  }\n\n  updateImageBounds() {\n    // Zoom onto new bounds\n    const coverageBounds = this.getImageBounds(false)\n    const shadowBounds = this.getImageBounds(true)\n\n    // If Coverage Overlay is available, recompute the bounds given new CBH\n    if (!(this.coverageOverlay === undefined)) {\n      this.coverageOverlay.setBounds(coverageBounds);\n      this.coverageBorder.setBounds(coverageBounds);\n    }\n\n    // If Shadow Overlay is available, recompute the bounds given new CBH\n    if (!(this.shadowOverlay === undefined)) {\n      this.shadowOverlay.setBounds(shadowBounds);\n      this.shadowBorder.setBounds(shadowBounds);\n    }\n  }\n}\n\nexport default Map;","import React, { Component } from 'react';\r\nimport { Row, Col, Card, Alert} from 'react-bootstrap';\r\nimport Cloudmotion from './Cloudmotion';\r\nimport JsmpegPlayer from './JsmpegPlayer';\r\nimport Map from './Map';\r\nimport { API_URL, subscribeToData, subscribeToCoverageData } from '../api';\r\nimport Moment from 'react-moment';\r\n\r\nconst videoOptions = {\r\n  poster: 'https://i.imgur.com/FJtImIA.png'\r\n};\r\n\r\nconst videoOverlayOptions = {};\r\n\r\nclass Home extends Component {\r\n      constructor(props) {\r\n      super(props);\r\n    \r\n      subscribeToData((err, data) => {\r\n        this.setState(data);\r\n        this.setState({ time: new Date() })\r\n      });\r\n\r\n      subscribeToCoverageData((err, data) => {\r\n        this.setState(data);\r\n      });\r\n      \r\n      this.state = {\r\n        cloud_coverage: '',\r\n        temperature: '',\r\n        dew_point: '',\r\n        barometric_pressure: '',\r\n        cloud_base_height: '',\r\n        time: ''\r\n      }\r\n    }\r\n\r\n    componentDidMount() {\r\n      fetch('/weather')\r\n      .then( res => res.json() )\r\n      .then( (data) => {\r\n        this.setState(data)\r\n      }).catch(console.log)\r\n    }\r\n\r\n    render(){\r\n        return (\r\n          <Row noGutters='true'>\r\n          <Col sm={4} style={{backgroundColor:\"ghostwhite\", width:\"100%\", height:\"auto\"}}>\r\n            <Card border=\"light\" style={{backgroundColor:\"ghostwhite\", display:\"flex\", color:\"slategray\"}}>\r\n              <Card.Header>Real-time Data</Card.Header>\r\n              <Card.Body>\r\n                <Card.Text>LIVESTREAM</Card.Text>\r\n                <div>\r\n                <JsmpegPlayer\r\n                    wrapperClassName=\"video-wrapper\"\r\n                    // videoUrl=\"ws://cloudtrackingcloudserver.herokuapp.com/stream\"\r\n                    videoUrl=\"ws://localhost:3001/stream\"\r\n                    options={videoOptions}\r\n                    overlayOptions={videoOverlayOptions}\r\n                />\r\n                </div>\r\n                <Card.Text style={{color:\"slategray\"}}>Location: Lake Claire; Orlando, FL</Card.Text>\r\n              </Card.Body>\r\n            </Card>\r\n            <hr />\r\n            <Card border='light' style={{backgroundColor: 'ghostwhite', display: 'flex'}}>\r\n            <Card.Body style={{ color: \"slategray\" }}>\r\n              <Card.Text>CURRENT CONDITIONS</Card.Text>\r\n              <Card.Text>Cloud Coverage: {this.state.cloud_coverage}%</Card.Text>\r\n              <Card.Text>Temperature: {this.state.temperature} °F</Card.Text>\r\n              <Card.Text>Dewpoint: {this.state.dew_point} °F</Card.Text>\r\n              <Card.Text>Barometric Pressure: {this.state.barometric_pressure} mb</Card.Text>\r\n              <Card.Text>Cloud Base Height (CBH): {this.state.cloud_base_height} ft</Card.Text>\r\n              <Card.Text style={{ fontStyle: \"italic\", fontSize: \"14px\" }}>Last updated:  \r\n                <Moment format=\"LLL\">{this.state.time}</Moment>\r\n              </Card.Text>\r\n            </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col sm={8}>\r\n            <Card border=\"light\">\r\n              <Card.Body>\r\n                \r\n                <Card.Text style={{color:\"slategray\"}}>CLOUD MONITORING</Card.Text>\r\n                \r\n                <React.Fragment>\r\n                  <Cloudmotion />\r\n                </React.Fragment>\r\n\r\n                <React.Fragment>\r\n                  <Map />\r\n                </React.Fragment>\r\n                <div style={{whiteSpace:\"pre-wrap\"}}>{``}</div>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          </Row>\r\n            \r\n        ); \r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport NavBar from './components/NavBar.js';\nimport Home from './components/Home'\nimport Archive from './components/Archive'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import Layout from './components/Layout.js';\n\nclass App extends Component {\n  render(){\n    return (\n      <React.Fragment>\n        <BrowserRouter>\n          <NavBar />\n          {/*<Layout>*/}\n            <Switch>\n              <Route exact path='/' component={Home} />\n              {/* <Route path='/archive' component={Archive} /> */}\n            </Switch>\n          {/*</Layout>*/}\n        </BrowserRouter>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\nclass Archive extends Component {\n  render(){\n        return(\n        <div className=\"container\">\n            <h4>Archive</h4>\n            <p>Stored data will be accessible here</p>\n        </div>\n        );\n  }\n}\n\nexport default Archive;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}